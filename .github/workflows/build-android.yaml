# Workflow name
name: Build Android APK

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ] # Adjust if your default branch is different (e.g., master)

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the Android APK
  build-android:
    # Use the latest stable Ubuntu runner provided by GitHub Actions
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE using the current major version (v4)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up JDK 17, recommended for modern Android builds, using the current major version (v4)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Popular open-source distribution
          java-version: '17'

      # 3. Set up Flutter SDK using the official action's stable major version (v1)
      #    Crucially, pin to the exact Flutter version your project uses.
      - name: Set up Flutter SDK
        uses: actions/setup-flutter@v1 # Use the documented stable major version tag
        with:
          flutter-version: '3.7.3' # Pin to your specific Flutter version
          cache: true # Enable caching for faster builds (caches pub dependencies etc.)

      # 4. Install Flutter dependencies listed in pubspec.yaml
      - name: Install dependencies
        run: flutter pub get

      # --- Optional Steps (Uncomment to enable) ---
      # Good practice to ensure code quality before building

      # # 5. Check Formatting
      # - name: Check Formatting
      #   run: flutter format --set-exit-if-changed .

      # # 6. Run Analyzer
      # - name: Run Analyzer
      #   run: flutter analyze

      # # 7. Run Tests
      # - name: Run Tests
      #   run: flutter test
      # --- End Optional Steps ---

      # 8. Build the Android APK in release mode
      #    Note: This creates an UNSIGNED release APK. Signing requires additional setup with secrets.
      - name: Build APK
        run: flutter build apk --release

      # 9. Upload the generated APK file as a build artifact using the current major version (v4)
      #    The artifact will be named 'release-apk.zip' and contain the app-release.apk file.
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error # Fail the step if the APK is not found

      # --- Optional: Build App Bundle (AAB) instead of APK ---
      # If you target the Google Play Store, you need an AAB.
      # Comment out the 'Build APK' and 'Upload APK Artifact' steps above and uncomment these:

      # - name: Build AAB
      #   run: flutter build appbundle --release
      #
      # - name: Upload AAB Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: release-aab
      #     path: build/app/outputs/bundle/release/app-release.aab
      #     if-no-files-found: error # Fail the step if the AAB is not found
